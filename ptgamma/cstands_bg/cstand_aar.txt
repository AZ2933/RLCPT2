@name ptgamma/cstands_bg/cstand_aar
@inputs MU_Master Pod:entity ControlStand:wirelink Number:string Horn1 Quill1 Horn2 Quill2 EmBrake BellToggle LightToggle MiscToggle HEP_Notch Active RemoteControl UsingRearSeat HumpMultiplier
@outputs CtlTable:table Bell Light Misc CONSTANT RemoteMode
@persist NotchedThrottle NumThrottleNotches HasDynamics NotchedDynamics TransitionMode TransitionControlType AirBrakeMode InitialReduction Lock_26L Bleeding
@persist [Lever_Throttle Lever_ReverserF Lever_ReverserN Lever_ReverserB Lever_24RL Lever_26L AirBrakeApply AirBrakeRelease AirBrakeDump LocoBrakeFull LocoBrakeReleaseHard LocoBrakeReleaseSoft]:string
@persist NQ Notch DNQ DynaNotch Dynamics TransitionQ RevQ ABQ HissQ LBQ LHissQ
@persist ControlPrintOrder:array DriverQ Routing:table DriverOld:entity Controls:table Shift:string
@persist ReverserF ReverserB IncreaseThrottle DecreaseThrottle IncreaseDynamics DecreaseDynamics IncreaseTrainBrake DecreaseTrainBrake IncreaseLocoBrake DecreaseLocoBrake SelectorUp SelectorDown
@persist HandBrake EmergencyBrake Sander
@persist SetReverser SetThrottle SetDynamics SetSelector SetBrakeNotch SetEqualRes SetLocoBrakeNotch SetLocoBrakePressure SetBleeding
@persist HornType C1P:vector C1A:angle CordAnchor1:vector CordAnchor2:vector CordExtendLength DongleHeight PullLength DownRatio
@persist CS:entity
@trigger 
if(duped()){
    reset()
}
if(first()){
    #FOR USE WITH RLC PT 2.0.52 OR OTHER COMPATIBLE VERSIONS
    
    #General Setup Instructions:
    #You will need one of these with RLC PT2. Spawn it somewhere and get wiring! See the RLC PT2 Operator's Manual for more instructions.
    #Don't neglect to check the config!
    #The "HEP_Notch" input is only necessary if the locomotive has HEP.
    #The "Active" and "RemoteControl" inputs are only necessary if the locomotive is equipped with Remote Control capability; "Active" goes to the Pod Controller, "RemoteControl" to a separate toggled button.
    #The "UsingRearSeat" input  is only necessary if the locomotive features Dual Cabs or Dual Control Stands.
    
    
    #Config
    
    #Pick a Control Scheme File! You can find them in "ptgamma/controls/" !
    #include "ptgamma/controls/Standard"
    
    AirBrakeMode = 3
    #0 - Simple Self-Lapping (Easy)
    #1 - Simple Manual Lapping (Medium)
    #2 - 26L Self-Lapping (Medium-Hard)
    #3 - 24RL Manual Lapping (Hard)
    #4 - No. 6 (6SL/6BL/6DS/6ET) Manual Lapping (Hard)
    #24RL, No. 6, and 26L are the hardest, but also the most rewarding!
    
    InitialReduction = 20 #If using 24RL or 26L brake modes, the train brake will automatically drop this much pressure in First Service or Initial Reduction positions.
    
    NotchedThrottle = 1 #0 for Continuous Throttle, 1 for Notched Throttle
    NumThrottleNotches = 8 #Number of Throttle Notches, not counting idle (If Used).
    
    HasDynamics = 1 #1 for Has Dynamic Brakes, 0 for Doesn't Have Dynamic Brakes
    
    NotchedDynamics = 0 #0 for Continuous Dynamic Brakes, 1 for Notched Dynamic Brakes
    
    TransitionMode = 1 #0 for No Transition, 1 for Transition
    TransitionControlType = 2 #0 for MANUAL Transition, 1 for Automatic Transition With Selector, 2 for Fully Automatic Transition
    
    HornType = 0 #0 for Lever, 1 for Cord
    
    CordExtendLength = 4 #How far from anchor point is the horn valve at the top?
    DongleHeight = 0.125 #Fraction of total cord length to place Dongle at
    PullLength = 1 #How many units to pull the cord towards you?
    DownRatio = 0.5 #Pull the dongle (PullLength x DownRatio) units down as well
    
    #Sounds (Don't touch unless you know what you're doing!)
    
    Lever_Throttle = "gsgtrainsounds/misc/switch_rotating.wav"
    Lever_ReverserF = "gsgtrainsounds/misc/reverser_f.wav"      
    Lever_ReverserN = "gsgtrainsounds/misc/reverser_neutral.wav"
    Lever_ReverserB = "gsgtrainsounds/misc/reverser_r.wav"
    
    Lever_24RL = "gsgtrainsounds/misc/airbrakes/air_16m_move.wav"
    Lever_26L = "gsgtrainsounds/misc/airbrakes/air_26l_move.wav"
    
    AirBrakeApply = "gsgtrainsounds/misc/airbrakes/air_train_apply.wav"
    AirBrakeRelease = "gsgtrainsounds/misc/airbrakes/air_train_release.wav"
    AirBrakeDump = "gsgtrainsounds/misc/airbrakes/air_dump.wav"
    
    LocoBrakeFull = "gsgtrainsounds/misc/airbrakes/air_ind_full.wav"
    LocoBrakeReleaseSoft = "gsgtrainsounds/misc/airbrakes/air_ind_release2.wav"
    LocoBrakeReleaseHard = "gsgtrainsounds/misc/airbrakes/air_ind_release1.wav"
    
    function vector linpos(V1:vector, V2:vector, P){
        return V1 + P*(V2-V1)
    }
    
    function normal adc(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,MinVal,MaxVal)){
            Output = round(Resolution*((Input - MinVal)/(MaxVal-MinVal)))
            
        }elseif(Input < MinVal){
            Output = 0
        }elseif(Input > MaxVal){
            Output = Resolution
        }
        
        return Output
    }
    
    function normal dac(MinVal, MaxVal, Resolution, Input){
        local Output = 0
        if(inrange(Input,0,Resolution)){
            Input = round(Input)
            Output = (MaxVal - MinVal)*(Input/Resolution) + MinVal
        }elseif(Input < 0){
            Output = MinVal
        }elseif(Input > Resolution){
            Output = MaxVal
        }
        return Output
    }
    
    function void entity:printProper(Message:string){
        if(This==owner()){
            print(Message)
        }else{
            Pod:printDriver(Message)
        }
    }
    
    
    
    ControlPrintOrder = array(
        "ReverserF",
        "ReverserB",
        "IncreaseThrottle",
        "DecreaseThrottle",
        "IncreaseDynamics",
        "DecreaseDynamics",
        "SelectorUp",
        "SelectorDown",
        "IncreaseTrainBrake",
        "DecreaseTrainBrake",
        "IncreaseLocoBrake",
        "DecreaseLocoBrake",
        "EmergencyBrake",
        "HandBrake",
        "Sander",
        "UseButtons"
    )
    
    #Controls Init
    foreach(K,V:string = Controls){
        if(V:find(" +Shift")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }
    
    
    CtlTable["AirBrakeMode",number] = AirBrakeMode
    CtlTable["InitialReduction",number] = InitialReduction
    CtlTable["NotchedThrottle",number] = NotchedThrottle
    CtlTable["NumThrottleNotches",number] = NumThrottleNotches
    CtlTable["NotchedDynamics",number] = NotchedDynamics
    CtlTable["TransitionMode",number] = TransitionMode
    CtlTable["TransitionControlType",number] = TransitionControlType
    
    if(AirBrakeMode==2){#26L
        SetBrakeNotch = 2
    }elseif(AirBrakeMode>=3){#24RL/6SL
        SetBrakeNotch = 4 
        #print("Yarg")   
    }elseif(AirBrakeMode==1){#Simple ML
        SetBrakeNotch = 2
    }else{ #Simple SL
        SetBrakeNotch = 0
    }
    LocoBrakeNotch = 0
    
    CONSTANT = 1
    
    
    #Control Stand Init
    
    
    #Control Stand Init
    CS = ControlStand:entity()
    
    if(HornType){
        if(CS:lookupAttachment("horncord1")){
            local Hpos1 = CS:attachmentPos("horncord1")
            local Hang1 = CS:attachmentAng("horncord1")
            rangerFilter(CS)
            local Hpos2 = rangerOffset(128,Hpos1 + CordExtendLength*Hang1:forward(), Hang1:up()):pos() 
            CordAnchor1 = CS:toLocal(Hpos2)
            local Hpos3 = linpos(Hpos1,Hpos2,DongleHeight) + (CordExtendLength/4)*Hang1:forward()
            #local Haxis1 = (Hpos2-Hpos1)
            local Length1 = Hpos1:distance(Hpos3)
            local Ang1 = -heading(Hpos1,ang(),Hpos3)
            local Ang1a = Ang1:rotateAroundAxis(Ang1:right(),-90)
            
            local Length2 = Hpos2:distance(Hpos3)
            local Ang2 = -heading(Hpos3,ang(),Hpos2)
            local Ang2a = Ang2:rotateAroundAxis(Ang2:right(),-90)
            
            holoCreate(1,linpos(Hpos1,Hpos3,0.5),vec(0.125,0.125,(Length1/60)),Ang1a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
            holoCreate(2,linpos(Hpos2,Hpos3,0.5),vec(0.125,0.125,(Length2/60)),Ang2a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
            holoCreate(3,Hpos3 + 1*Ang2a:up(),vec(0.125,0.125,0.25),Ang2a,vec(255),"models/sprops/misc/fittings/cred_12_9_tall.mdl")
            holoParent(1,CS)
            holoParent(2,CS)
            holoParent(3,CS)
            holoMaterial(1,"models/debug/debugwhite")
            holoMaterial(2,"models/debug/debugwhite")
            holoMaterial(3,"sprops/textures/sprops_wood2")
            
            C1P = CS:toLocal(Hpos1)
            C1A = CS:toLocal(Hang1)
        }
    }
    
    runOnChat(1)
    timer("clk",100)
}
if(MU_Master){
            
    #MASTER MODE
    local Driver = noentity()
    local PodDriver = Pod:driver()
    if(RemoteControl | RemoteMode){
        if(Active & !PodDriver){
            Driver = owner()
        }
    }else{
        Driver = Pod:driver()
    }
    if(Driver & !DriverQ){
        DriverQ = 1
        runOnKeys(Driver,1)
    }elseif(!Driver & DriverQ){
        DriverQ = 0
        runOnKeys(DriverOld,0)
    }
    DriverOld = Driver
    
    if(keyClk(Driver)){
        local Shifting = Driver:keyPressed(Shift)
        
        UseButton = Driver:keyPressed(Controls["UseButton",string]) & (Routing["UseButton",number] ? Shifting : !Shifting)
        
        if(!UseButton){
        
            local RF = UsingRearSeat ? "ReverserB" : "ReverserF"
            local RB = UsingRearSeat ? "ReverserF" : "ReverserB"
            
            ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
            ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
            
            IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
            DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
            
            IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
            DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
            
            IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
            DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
            
            IncreaseDynamics = Driver:keyPressed(Controls["IncreaseDynamics",string]) & (Routing["IncreaseDynamics",number] ? Shifting : !Shifting)
            DecreaseDynamics = Driver:keyPressed(Controls["DecreaseDynamics",string]) & (Routing["DecreaseDynamics",number] ? Shifting : !Shifting)
            
            EmergencyBrake = Driver:keyPressed(Controls["EmergencyBrake",string]) & (Routing["EmergencyBrake",number] ? Shifting : !Shifting)
            
            HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
            Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
            
            SelectorUp = Driver:keyPressed(Controls["SelectorUp",string]) & (Routing["SelectorUp",number] ? Shifting : !Shifting)
            SelectorDown = Driver:keyPressed(Controls["SelectorDown",string]) & (Routing["SelectorDown",number] ? Shifting : !Shifting)
            
        }
    }
}else{
    if(DriverQ){
        DriverQ = 0
        runOnKeys(owner(),0)
    }
}
if(clk("clk")){
    local Tick = 1
    Dynamics = SetDynamics>0
    
    #Throttle
    if(!Dynamics){
        if(NotchedThrottle){
            if(IncreaseThrottle & !NQ & (Notch<NumThrottleNotches)){
                NQ = 1
                Notch++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(DecreaseThrottle & !NQ & (Notch>0)){
                NQ = 1
                Notch--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(!IncreaseThrottle & !DecreaseThrottle & NQ){
                NQ = 0
                #soundStop(1)
            }
            SetThrottle = dac(0,100,NumThrottleNotches,Notch)
        }else{
            SetThrottle += (IncreaseThrottle - DecreaseThrottle)*5
            SetThrottle = clamp(SetThrottle,0,100)
            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
        }
    }
    
    #Hump Control
    
    SetHumpMul = ->HumpMultiplier ? HumpMultiplier : 1
    
    #Dynamic Brakes
    if((SetThrottle==0) & HasDynamics & (abs(SetReverser)==1)){
        if((SetDynamics==0) & IncreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = 0
            SetDynamics = 10
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }elseif((SetDynamics==10) & DecreaseDynamics & !DNQ){
            DNQ = 1
            DynaNotch = -1
            SetDynamics = 0
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_Throttle)
        }
        
        if(Dynamics & NotchedDynamics){
            if(IncreaseDynamics & !DNQ & (DynaNotch<NumThrottleNotches)){
                DNQ = 1
                DynaNotch++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }elseif(DecreaseDynamics & !DNQ & (DynaNotch>-1)){
                DNQ = 1
                DynaNotch--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
            if(DynaNotch>-1){SetDynamics = dac(10,100,NumThrottleNotches,DynaNotch)}
        }elseif(Dynamics){
            if(IncreaseDynamics & (SetDynamics<100) & !DNQ){
                SetDynamics++
                if(SetDynamics>100){SetDynamics=100}
            }elseif(DecreaseDynamics & (SetDynamics>10)){
                DNQ = 1
                SetDynamics--
                if(SetDynamics<10){SetDynamics=10}
            }
            DynaNotch = adc(10,100,NumThrottleNotches,SetDynamics)
        }
        if(!IncreaseDynamics & !DecreaseDynamics & DNQ){
            DNQ = 0
        }
    }
    
    #Selector
    if((TransitionMode==1) & (TransitionControlType<2)){
        if(SelectorUp & !TransitionQ){
            TransitionQ = 1
            if(SetSelector<4){
                SetSelector++
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(SelectorDown & !TransitionQ){
            TransitionQ = 1
            if(SetSelector>0){
                SetSelector--
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_Throttle)
            }
        }elseif(!SelectorUp & !SelectorDown & TransitionQ){
            TransitionQ = 0
        }
        
    }
    
    #Reverser
    
    if((SetThrottle==0) & (!Dynamics)){
        if(ReverserF & !RevQ & (SetReverser<1)){
            RevQ = 1
            SetReverser++
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserF)
        }elseif(ReverserB & !RevQ & (SetReverser>-1)){
            RevQ = 1
            SetReverser--
            soundStop(1)
            Pod:soundPlay(1,0.5,(SetReverser==0) ? Lever_ReverserN : Lever_ReverserB)
        }elseif(!ReverserF & !ReverserB & RevQ){
            RevQ = 0
        }
    }
    
    #Train Brakes
    
    if(AirBrakeMode==4){ #6SL
        #0-Release
        #1-Running
        #2-Holding
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch==4 & (SetEqualRes>0) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch<=1 & (SetEqualRes<90) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<90){
                    SetEqualRes+=2
                    if(SetEqualRes>90){SetEqualRes=90}
                }
                break
            case 1, #Running
                if(SetEqualRes<90){
                    SetEqualRes+=2
                    if(SetEqualRes>90){SetEqualRes=90}
                }
                break
            case 2, #Holding
                if(SetEqualRes<90){
                    SetEqualRes+=2
                    if(SetEqualRes>90){SetEqualRes=90}
                }
                break
            case 4, #Service
                if(SetEqualRes>0){
                    SetEqualRes-=2
                    if(SetEqualRes<0){SetEqualRes=0}
                }
                break
            default,
                break
        }
    }elseif(AirBrakeMode==3){ #24RL
        #0-Release
        #1-Running
        #2-First Service
        #3-Lap
        #4-Service
        #6-Emergency
        if(IncreaseTrainBrake & (SetBrakeNotch < 4) & !ABQ){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch==4 & (SetEqualRes>0) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }elseif(SetBrakeNotch==2 & (SetEqualRes>(90-InitialReduction))){
                SetEqualRes = 90-InitialReduction
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & (SetBrakeNotch > 0) & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=4
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if(SetBrakeNotch<=1 & (SetEqualRes<90) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            #soundStop(3)
            ABQ = 0
        }
        switch(SetBrakeNotch){
            case 0, #Release
                if(SetEqualRes<90){
                    SetEqualRes+=2
                    if(SetEqualRes>90){SetEqualRes=90}
                }
                break
            case 1, #Running
                if(SetEqualRes<90){
                    SetEqualRes+=2
                    if(SetEqualRes>90){SetEqualRes=90}
                }
                break
            case 4, #Service
                if(SetEqualRes>0){
                    SetEqualRes-=2
                    if(SetEqualRes<0){SetEqualRes=0}
                }
                break
            default,
                break
        }
        
    }elseif(AirBrakeMode==2){#26L
    #0-Release
    #1-Minimum Reduction / Service
    #2-Suppression
    #6-Emergency
        if(IncreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if(SetBrakeNotch==0){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    SetEqualRes = 90-InitialReduction
                }elseif((SetBrakeNotch==1) & (SetEqualRes>0)){
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_26L)
                }elseif((SetBrakeNotch==1) & (SetEqualRes==0)){
                    SetBrakeNotch=2
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 1
                }
                if(!HissQ & (SetEqualRes>0)){
                    HissQ = 1
                    Pod:soundPlay(2,6,AirBrakeApply)
                    timer("EndHiss",6000)
                }
            }
            if((SetBrakeNotch==1) & (SetEqualRes>0) & !Lock_26L){
                SetEqualRes-=2
                if(SetEqualRes<0){SetEqualRes=0}
            }
        }elseif(DecreaseTrainBrake){
            if(!ABQ){
                ABQ = 1
                if((SetBrakeNotch==1) & (SetEqualRes==(90-InitialReduction))){
                    SetBrakeNotch=0
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    SetEqualRes = 90
                    if(!HissQ){
                        HissQ = 1
                        Pod:soundPlay(2,6,AirBrakeRelease)
                        timer("EndHiss",6000)
                    }
                }elseif((SetBrakeNotch==1) & (SetEqualRes<90)){
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_26L)
                    if(!HissQ & (SetEqualRes<90)){
                        HissQ = 1
                        Pod:soundPlay(2,6,AirBrakeRelease)
                        timer("EndHiss",6000)
                    }
                }elseif((SetBrakeNotch==2)){
                    Lock_26L = 1
                    SetBrakeNotch=1
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 0
                }elseif(SetBrakeNotch==6){
                    SetBrakeNotch=2
                    soundStop(1)
                    Pod:soundPlay(1,0.5,Lever_24RL)
                    Suppression = 1
                }
                
            }
            if((SetBrakeNotch==1) & (SetEqualRes<(90-InitialReduction)) & !Lock_26L){
                SetEqualRes+=2
                if(SetEqualRes>(90-InitialReduction)){SetEqualRes = 90 - InitialReduction}
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
            Lock_26L = 0
        }
    }elseif(AirBrakeMode==1){#Simple Manual Lapping
    #0-Release
    #1-Lap
    #2-Apply
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ & (SetBrakeNotch<2)){
            ABQ = 1
            SetBrakeNotch++
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if((SetBrakeNotch==2) & (SetEqualRes>0) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ & (SetBrakeNotch>0)){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch=2
            }else{
                SetBrakeNotch--
            }
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_24RL)
            if((SetBrakeNotch==0) & (SetEqualRes<90) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeRelease)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }
        

        if((SetBrakeNotch==2) & (SetEqualRes>0)){
            SetEqualRes--
            if(SetEqualRes<0){SetEqualRes=0}
        }elseif((SetBrakeNotch==0) & (SetEqualRes<90)){
            SetEqualRes++
            if(SetEqualRes>90){SetEqualRes=90}
        }
        
    }else{#Simple Self Lapping
            
    #Lol what notches?
    #0-Service Region
    #6-Emergency
        if(IncreaseTrainBrake & !ABQ){
            ABQ = 1
            soundStop(1)
            Pod:soundPlay(1,0.5,Lever_26L)
            if((SetEqualRes>0) & !HissQ){
                HissQ = 1
                Pod:soundPlay(2,6,AirBrakeApply)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseTrainBrake & !ABQ){
            ABQ = 1
            if(SetBrakeNotch==6){
                SetBrakeNotch = 0
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_24RL)
            }else{
                soundStop(1)
                Pod:soundPlay(1,0.5,Lever_26L)
                if((SetEqualRes<90) & !HissQ){
                    HissQ = 1
                    Pod:soundPlay(2,6,AirBrakeRelease)
                    timer("EndHiss",6000)
                }
            }
        }elseif(!IncreaseTrainBrake & !DecreaseTrainBrake & ABQ){
            ABQ = 0
        }

            
        if(IncreaseTrainBrake & (SetEqualRes>0)){
            SetEqualRes--
            BleedPressure = Bleeding ? 0 : 90
            if(SetEqualRes<0){SetEqualRes=0}
        }elseif(DecreaseTrainBrake & (SetEqualRes<90)){
            SetEqualRes++
            if(SetEqualRes>90){SetEqualRes=90}
        }
        
    }
    
    #Locomotive Brakes
    if(((AirBrakeMode==0) | (AirBrakeMode==2))){ #Self Lapping
        if(IncreaseLocoBrake & (SetLocoBrakePressure<90)){
            #if(BleedPressure<90){BleedPressure=90}
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure+=2
            if(SetLocoBrakePressure>90){
                SetLocoBrakePressure = 90
            }
            if(SetLocoBrakePressure==90 & !LHissQ){
                LHissQ = 1
                soundStop(1)
                Pod:soundPlay(1,0.5,LocoBrakeFull)
                timer("EndHiss",500)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure>0)){
            if(!LBQ){LBQ=1}
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure = 0}
            if(!LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetLocoBrakePressure>45) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseLocoBrake & (SetLocoBrakePressure==0) & !LBQ){
            LBQ = 1
            SetBleeding = 1
            if((SetEqualRes<90) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetEqualRes<45) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
        }

    }else{ #Manual Lapping
            
        if(IncreaseLocoBrake & !LBQ & (SetLocoBrakeNotch<2)){
            LBQ = 1
            SetLocoBrakeNotch++
            if(SetLocoBrakeNotch==2){
                soundStop(1)
                Pod:soundPlay(1,0.5,LocoBrakeFull)
                #BleedPressure = 90
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch>0)){
            LBQ = 1
            SetLocoBrakeNotch--
            if((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetLocoBrakePressure>45) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(DecreaseLocoBrake & !LBQ & (SetLocoBrakeNotch==0)){
            LBQ = 1
            SetBleeding = 1
            if((SetLocoBrakeNotch<=0) & (SetEqualRes<90) & !LHissQ){
                LHissQ = 1
                Pod:soundPlay(2,6,(SetEqualRes<45) ? LocoBrakeReleaseHard : LocoBrakeReleaseSoft)
                timer("EndHiss",6000)
            }
        }elseif(!IncreaseLocoBrake & !DecreaseLocoBrake & LBQ){
            LBQ = 0
            SetBleeding = 0
            
        }
       
        if((SetLocoBrakeNotch==2) & (SetLocoBrakePressure<90)){
            SetLocoBrakePressure+=2
            if(SetLocoBrakePressure>90){SetLocoBrakePressure=90}
        }elseif((SetLocoBrakeNotch<=0) & (SetLocoBrakePressure>0)){
            SetLocoBrakePressure-=2
            if(SetLocoBrakePressure<0){SetLocoBrakePressure=0}
        }
        
    }
    
    #Emergency Brake
    
    if(EmergencyBrake | EmBrake){

        SetEqualRes = 0
        
        SetThrottle = 0
        Notch = 0
        SetDynamics = 0
        DynaNotch = 0

        SetBrakeNotch = 6
        
    }
        
    #Control Stand
    
    #Reverser
    CS:setBodygroup(1,MU_Master ? SetReverser+2 : 0)
    #Throttle
    CS:setBodygroup(2,adc(0,100,8,SetThrottle))
    #Dynamic Brakes
    CS:setBodygroup(3,Dynamics ? adc(10,100,8,SetDynamics)+1 : 0)
    #Train Brake
    local TBB = 0
    switch(AirBrakeMode){
        case 4, #6SL
            TBB = select(SetBrakeNotch+1,0,2,4,7,10,0,11)
            break
        case 3, #24RL
            TBB = select(SetBrakeNotch+1,0,2,4,7,10,0,11)
            break
        case 2, #26L
            TBB = select(SetBrakeNotch+1,0,adc(0,90-InitialReduction,6,90-InitialReduction-SetEqualRes)+2,10,0,0,0,11)
            break
        case 1, #SML
            TBB = select(SetBrakeNotch+1,0,5,10,0,0,0,11)
            break
        case 0, #SSL
            TBB = select(SetBrakeNotch+1,adc(0,90,10,90-SetEqualRes),0,0,0,0,0,11)
            break
    }
    CS:setBodygroup(4,TBB)
    #Loco Brake
    local LBB = 0
    if((AirBrakeMode==1)|(AirBrakeMode==3)|(AirBrakeMode==4)){ #ML
        LBB = SetBleeding ? 0 : select(SetLocoBrakeNotch+1,1,4,7)
    }else{ #SL
        LBB = SetBleeding ? 0 : adc(0,90,6,SetLocoBrakePressure)+1
    }
    CS:setBodygroup(5,LBB)
    #Horn 1
    if(HornType){
        local Hpos1 = CS:toWorld(C1P)
        local Hang1 = CS:toWorld(C1A)
        #CordDir1 = CS:toLocal(Hang1:forward())
        #rangerFilter(CS)
        local Hpos2 = CS:toWorld(CordAnchor1)
        local PFactor = Quill1 ? 0.5*Horn1 : Horn1
        local Hpos3 = linpos(Hpos1,Hpos2,DongleHeight) + Hang1:forward()*(CordExtendLength/4 + PullLength*PFactor) - Hang1:up()*PullLength*PFactor*DownRatio
        #local Haxis1 = (Hpos2-Hpos1)
        local Length1 = Hpos1:distance(Hpos3)
        local Ang1 = -heading(Hpos1,ang(),Hpos3)
        local Ang1a = Ang1:rotateAroundAxis(Ang1:right(),-90)
        local Length2 = Hpos2:distance(Hpos3)
        local Ang2 = -heading(Hpos3,ang(),Hpos2)
        local Ang2a = Ang2:rotateAroundAxis(Ang2:right(),-90)
        
        #holoCreate(6,linpos(Hpos1,Hpos3,0.5),vec(0.25,0.25,(Length1/60)),Ang1a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
        #holoCreate(7,linpos(Hpos2,Hpos3,0.5),vec(0.25,0.25,(Length2/60)),Ang2a,vec(255,225,127),"models/sprops/cylinders/size_1/cylinder_1_5x60.mdl")
        holoScale(1,vec(0.125,0.125,(Length1/60)))
        holoScale(2,vec(0.125,0.125,(Length2/60)))
        holoPos(1,linpos(Hpos1,Hpos3,0.5))
        holoPos(2,linpos(Hpos2,Hpos3,0.5))
        holoPos(3,Hpos3 + 1*Ang2a:up())
        holoAng(1,Ang1a)
        holoAng(2,Ang2a)
    }else{
        CS:setBodygroup(6,Horn1 ? 2-Quill1 : 0)
    }
    #Horn 2 Unused
    #CS:setBodygroup(1,MU_Master ? SetReverser+2 : 0)
    
    timer("clk",50)
}elseif(clk("EndHiss")){
    HissQ = 0
    LHissQ = 0
}elseif(clk("PenaltyTimeout")){
    PenaltyBrake = 0   
}


CtlTable["SetReverser",number] = SetReverser
CtlTable["SetThrottle",number] = SetThrottle
CtlTable["SetDynamics",number] = SetDynamics
CtlTable["SetSelector",number] = SetSelector
CtlTable["SetBrakeNotch",number] = SetBrakeNotch
CtlTable["SetEqualRes",number] = SetEqualRes
CtlTable["SetLocoBrakeNotch",number] = SetLocoBrakeNotch
CtlTable["SetLocoBrakePressure",number] = SetLocoBrakePressure
CtlTable["SetBleeding",number] = SetBleeding
CtlTable["SetHumpMultiplier",number] = SetHumpMul

CtlTable["EmergencyBrake",number] = EmergencyBrake
CtlTable["HandBrake",number] = HandBrake
CtlTable["Sander",number] = Sander

if(chatClk(owner())|chatClk(Pod:driver())){
    local Speaker = lastSpoke()
    local Sentence = Speaker:lastSaid():explode(" ")
    local CMD_PreNum = Sentence[1,string]
    local CMD_S = CMD_PreNum:explode(":")
    local CMD = CMD_S[1,string]
    local NumberGiven = CMD_S[2,string]
    local Num = Number:trim()
    
    local OnRun = 1#(On1 & Run)|(On2 & Run_DPM)
    
    
    if((NumberGiven==Num) | NumberGiven==""){
        switch(CMD){
            case ".controls",
                if(MU_Master){
                    for(K=1,ControlPrintOrder:count()){
                        local ControlName = ControlPrintOrder[K,string]
                        local X = Controls[ControlName,string]
                        if(Routing[ControlName,number]){
                            Speaker:printProper(ControlName + ": Shift + " + X)
                        }else{
                            Speaker:printProper(ControlName + ": " + X)
                        }
                    }
                }
                hideChat(1)
                break
            case ".reverser",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(SetThrottle>0){
                        Speaker:printProper("[RLCPT] Throttle is On!")
                    }else{
                        SetReverser = sign(Sentence[2,string]:toNumber())
                        Speaker:printProper("[RLCPT] Reverser set to " + SetReverser:toString() + ".")
                    }
                }
                hideChat(1)
                break
            case ".throttle",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        Speaker:printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            SetThrottle = clamp(dac(0,100,NumThrottleNotches,adc(0,100,NumThrottleNotches,Sentence[2,string]:toNumber())),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }else{
                            SetThrottle = clamp(Sentence[2,string]:toNumber(),0,100)
                            Notch = adc(0,100,NumThrottleNotches,SetThrottle)
                        }
                        Speaker:printProper("[RLCPT] Throttle set to " + SetThrottle + "%.")
                    }
                }
                hideChat(1)
                break
            case ".notch",
                if(MU_Master & OnRun){
                    if(Dynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are On!")
                    }elseif(HEP_Notch==1){
                        Speaker:printProper("[RLCPT] HEP Mode is in Standby!")
                    }else{
                        if(NotchedThrottle){
                            Notch = clamp(round(Sentence[2,string]:toNumber()),0,NumThrottleNotches)
                            SetThrottle = dac(0,100,NumThrottleNotches,Notch)
                            Speaker:printProper("[RLCPT] Throttle set to Notch " + Notch + ".")
                            
                        }else{
                            Speaker:printProper("[RLCPT] Throttle has no Notches!")
                        }
                        
                    }
                }
                hideChat(1)
                break
            case ".dynamics",
                if(MU_Master & OnRun){
                    if(!HasDynamics){
                        Speaker:printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                    }elseif(!abs(SetReverser)){
                        Speaker:printProper("[RLCPT] Reverser is not Engaged!")
                    }elseif(SetThrottle>0){
                        Speaker:printProper("[RLCPT] Throttle is not in Idle!")
                    }else{
                        local Set = clamp(Sentence[2,string]:toNumber(),0,100)
                        SetDynamics = (Set<10) ? 0 : Set
                        DynaNotch = (SetDynamics==0) ? -1 : adc(10,100,NumThrottleNotches,SetDynamics)
                        
                        #Dynamics = DynamicBrakingPower>0
                        
                        Speaker:printProper("[RLCPT] Dynamic Brake set to " + SetDynamics + "%.")
                    }
                }
                hideChat(1)
                break
            case ".dynanotch",
                if(MU_Master & OnRun){
                    if(NotchedDynamics){
                        if(!HasDynamics){
                            Speaker:printProper("[RLCPT] Dynamic Brakes are not Enabled!")
                        }elseif(!abs(SetReverser)){
                            Speaker:printProper("[RLCPT] Reverser is not Engaged!")
                        }elseif(SetThrottle>0){
                            Speaker:printProper("[RLCPT] Throttle is not in Idle!")
                        }else{
                            local Set = clamp(round(Sentence[2,string]:toNumber()),-1,NumThrottleNotches)
                            DynaNotch = Set
                            SetDynamics = (Set==-1) ? 0 : dac(10,100,NumThrottleNotches,DynaNotch)
                            
                            #Dynamics = DynamicBrakingPower>0
                            
                            Speaker:printProper("[RLCPT] Dynamic Brake set to Notch " + DynaNotch + " (" + SetDynamics + "%).")
                        }
                    }else{
                        Speaker:printProper("[RLCPT] Dynamic Brakes are not Notched!")
                    }
                }
                hideChat(1)
                break
            case ".abset",
                if(MU_Master & OnRun){
                    local What = Sentence[2,string]
                    if(What==""){
                        PenaltyBrake = 1
                        Speaker:printProper("[RLCPT] Setting Emergency Brake application!")
                        timer("PenaltyTimeout",1000)
                    }else{
                        local Set = clamp(What:toNumber(),0,90)
                        switch(AirBrakeMode){
                            case 4, #6SL
                                if(Set==0){
                                    SetEqualRes = 90
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = 90 - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 3, #24RL
                                if(Set==0){
                                    SetEqualRes = 90
                                    SetBrakeNotch = 1
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = 90 - InitialReduction
                                    SetBrakeNotch = 2
                                }else{
                                    SetEqualRes = 90 - Set
                                    SetBrakeNotch = 3
                                }
                                break
                            case 2, #26L
                                if(Set==0){
                                    SetEqualRes = 90
                                    SetBrakeNotch = 0
                                }elseif(Set<InitialReduction){
                                    SetEqualRes = 90 - InitialReduction
                                    SetBrakeNotch = 1
                                }else{
                                    SetEqualRes = 90 - Set
                                    SetBrakeNotch = 1
                                }
                                break
                            case 1, #SML
                                SetBrakeNotch = 1
                                SetEqualRes = 90 - Set
                                break
                            case 0, #SSL
                                SetBrakeNotch = 0
                                SetEqualRes = 90 - Set
                                break
                        }
                        Speaker:printProper("[RLCPT] Setting " + (90-SetEqualRes) + "lb application on train.")
                    }
                }
                hideChat(1)
                break
            case ".lbset",
                local Set = clamp(Sentence[2,string]:toNumber(),0,90)
                local ML = (AirBrakeMode==1)|(AirBrakeMode==3)|(AirBrakeMode==4)
                SetLocoBrakePressure = Set
                if(ML){SetLocoBrakeNotch=1}
                Speaker:printProper("[RLCPT] Setting " + (SetLocoBrakePressure) + "lb application on locomotive(s).")
                
                hideChat(1)
                break
            case ".remotemode",
                if(MU_Master){
                    RemoteMode = sign(Sentence[2,string]:toNumber())
                    Speaker:printProper("[RLCPT] Remote Control Mode set to " + RemoteMode + ".")
                    hideChat(1)
                }
                break
            default,
                break
        }
    }
    
}
if(LightToggle & ~LightToggle){
    Light = !Light
    CS:soundPlay(0,1,"buttons/lightswitch2.wav")
}
if(BellToggle & ~BellToggle){
    Bell = !Bell
    CS:soundPlay(0,1,Bell ? "gsgtrainsounds/misc/air_on.wav" : "gsgtrainsounds/misc/air_off.wav")
}
if(MiscToggle & ~MiscToggle){
    Misc = !Misc
}
