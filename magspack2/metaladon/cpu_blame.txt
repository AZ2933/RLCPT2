@name CPU Blame
@outputs X DistAvg Unassigned
@persist Array:array Owners:table X Total Phase Holos:array DistAvg Max AssignRadius Unassigned

#Made by Sir Metaladon
#Github Link: https://github.com/MagnumMacKivler/RLCPT2/tree/master/magspack2/metaladon
#Version 1.0

if(first()|dupefinished()){
    
    AssignRadius = 512 #Changes how far out the E2 will look for holograms to assign them to a player. Default is 512.
    
    findByClass("gmod_wire_expression2")
    Array = findToArray()
    X = Phase = 1
    
    
}

while(X <= Array:count() & perf() & Phase == 1 & holoCanCreate()){
    
    Owners[Array[X,entity]:owner():name(),vector] = vec(Owners[Array[X,entity]:owner():name(),vector]:x() + floor(Array[X,entity]:cpuUsage()* 1000000),Owners[Array[X,entity]:owner():name(),vector]:y() + 1,0)
    Total = Total + floor(Array[X,entity]:cpuUsage()* 1000000)
    X++
    
}

if(X > Array:count() & Phase == 1){
    
    Phase++

    findByClass("gmod_wire_hologram")
    Holos = findToArray()
    X = 1
    print("CPU Checked, scanning " + Holos:count() + " holograms. This will take about "+ceil(Holos:count()/20)+" seconds.")
    
}

while(X <= Holos:count() & perf() & minquota() > 50 & !(first()|dupefinished()) & Phase == 2 & findCanQuery()){
    
    findByClass("prop_physics")
    findSortByDistance(Holos[X,entity]:pos())
    findClipToSphere(Holos[X,entity]:pos(),AssignRadius)
    Find = findToArray()
    
    if(Find:count() >= 1){
    
        Owners[Find[1,entity]:owner():name(),vector] = Owners[Find[1,entity]:owner():name(),vector] + vec(0,0,1)
        
        DistAvg = DistAvg + Find[1,entity]:pos():distance(Holos[X,entity]:pos())/Holos:count()
        
        if(Find[1,entity]:pos():distance(Holos[X,entity]:pos()) > Max){
            
            Max = Find[1,entity]:pos():distance(Holos[X,entity]:pos())
            
        }
        
    }else{
    
        Unassigned++
        
    }
    
    X++
    
}

if(X > Holos:count() & Phase == 2){
    
    Phase++
    
    Keys = Owners:keys()
    
    print("Here's the stats: (Hologram counts are approximate)")
    
    for(Y = 1,Keys:count()){
        
        if(Owners[Keys[Y,string],vector]:y() > 0 & Keys[Y,string] != ""){
            
            print("\""+Keys[Y,string]+"\" has "+Owners[Keys[Y,string],vector]:y()+" E2s using "+Owners[Keys[Y,string],vector]:x()+" CPU, and "+Owners[Keys[Y,string],vector]:z()+" holograms.")
            
        }
        
    }
    
    print("Total E2s: " + Array:count()+" / Total CPU: " + Total)
    print("Total Holos: " + Holos:count()+" / Unnasigned Holos: " + Unassigned)
    
    selfDestruct()
    
    
}

if(Phase != 2 | Phase != 3){

    interval(1)
    if(Phase == 1){
        
        setName("CPU Blame\nCPU scan "+floor((X/Array:count())*1000)/10 + "% completed.\nApprox. "+ceil((Array:count()-X)/20)+" seconds remaining")
        
    }elseif(Phase == 2){
        
        setName("CPU Blame\nHologram scan "+floor((X/Holos:count())*1000)/10 + "% completed.\nApprox. "+ceil((Holos:count()-X)/20)+" seconds remaining")
        
    }
    
}

